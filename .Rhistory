options(java.home="C:\\Program Files\\Java\\jdk1.8.0_45\\")
install.packages("rJava")
install.packages("xlsx")
library(rJava)
library(xlsx)
install.packages("caret")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
ls()
head(diagnosis
)
names(diagnosis)
names(predictors)
talbe(diagnosis)
table(diagnosis)
diagnosis
dim(predictors)
adData = data.frame(diagnosis,predictors)
names(adData)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
head(trainIndex)
table(trainIndex)
names(trainIndex)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
training
dim(trianing)
dim(training, testing)
dim(training)
dim(testing)
?createDataPartition
trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData = data.frame(predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
training
dim(trianing)
dim(training)
dim(training
)
dim(testing)
names(training)
dim(diagnosis)
dim(predictors)
SIZE(diagnosis)
LENGTH(diagnosis)
class(diagnosis)
diagnosis
adData = data.frame(diagnosis,predictors)
train = createDataPartition(diagnosis, p = 0.50,list=FALSE)
test = createDataPartition(diagnosis, p = 0.50,list=FALSE)
adData = data.frame(predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
dim(training)
dim(testing)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
head(training)
?plot
plot(y=CompressiveStrength, col=Cement)
with(training, plot(y=CompressiveStrength, col=Cement))
with(training, plot(x=nownames(CompressiveStrength), y=CompressiveStrength, col=Cement))
with(training, plot(x=rownames(CompressiveStrength), y=CompressiveStrength, col=Cement))
with(training, plot(x=rowname(CompressiveStrength), y=CompressiveStrength, col=Cement))
with(training, plot(x=rowname, y=CompressiveStrength, col=Cement))
with(training, plot(x=rowname(CompressiveStrength), y=CompressiveStrength, col=Cement))featurePlot(x=training[,c(“Cement”,”BlastFurnaceSlag”,”FlyAsh”, "Superplasticizer", "CoarseAggregate", "FineAggregate", "Age")], y=training$CompressiveStrength, plot=”pairs”)
featurePlot(x=training[,c(“Cement”,”BlastFurnaceSlag”,”FlyAsh”, "Superplasticizer", "CoarseAggregate", "FineAggregate", "Age")], y=training$CompressiveStrength, plot=”pairs”)
featurePlot(x=training[,c(“Cement”,”BlastFurnaceSlag”,”FlyAsh”)], y=training$CompressiveStrength, plot=”pairs”)
featurePlot(x=training[,c(”FlyAsh”)], y=training$CompressiveStrength, plot=”pairs”)
featurePlot(x=training[,c(FlyAsh)], y=training$CompressiveStrength, plot=”pairs”)
featurePlot(x=training[,c(FlyAsh, age)], y=training$CompressiveStrength, plot=”pairs”)
?featurePlot
class(training)
class(training$Cement)
class(training$BlastFurnaceSlag)
class(training$FlyAsh)
class(training$Water)
class(training$Superplasticizer)
class(training$Age)
head(testing)
?cut2
library(misc2)
install.packages(misc2)
install.packages("misc2"")
)
""
install.packages("misc2")
install.packages("Hmisc")
install.packages("Hmisc")
library(Hmisc)
featurePlot(x=training[,c("Cement","BlastFurnaceSlag","FlyAsh", "Superplasticizer",
"CoarseAggregate", "FineAggregate", "Age")], y=training$CompressiveStrength, plot="pairs")
featurePlot(x=training[,c("row")], y=training$CompressiveStrength, plot="pairs")
featurePlot(x=training[,row], y=training$CompressiveStrength, plot="pairs")
featurePlot(x=row, y=training$CompressiveStrength, plot="pairs")
plot(row, training$CompressiveStrength)
plot(rows, training$CompressiveStrength)
plot(1:nrow(training), training$CompressiveStrength)
plot(1:nrow(training), training$CompressiveStrength, col=training$Age)
plot(1:nrow(training), training$CompressiveStrength, col=cut2(training$Age, g=5))
plot(1:nrow(training), training$CompressiveStrength, col=cut2(training$BlastFurnaceSlag, g=5))
plot(1:nrow(training), training$CompressiveStrength, col=cut2(training$FlyAsh, g=5))
plot(1:nrow(training), training$CompressiveStrength, col=cut2(training$Superplasticizer, g=5))
plot(1:nrow(training), training$CompressiveStrength, col=cut2(training$CoarseAggregate, g=5))
plot(1:nrow(training), training$CompressiveStrength, col=cut2(training$FineAggregate, g=5))
te, g=5))
plot(1:nrow(training), training$CompressiveStrength, col=cut2(training$Age, g=5))
plot(1:nrow(training), training$CompressiveStrength, col=cut2(training$FlyAsh, g=5))
te, g=5))
plot(1:nrow(training), training$CompressiveStrength, col=cut2(training$Age, g=5))
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(training$SuperPlasticizer)
class(training$Superplasticizer)
hist(x=training$SuperPlasticizer)
hist(as.numeric(training$SuperPlasticizer))
hist(as.numeric(training$SuperPlasticizer))
hist(as.numeric(training$SuperPlasticizer), breaks=10)
summary(training$Superplasticizer
)
?hist
hist(training$SuperPlasticizer, breaks=10)
hist(as.numeric(training$SuperPlasticizer), breaks=10)
head(training$Superplasticizer
)
head(training$Superplasticizer, 50)
head(training$Superplasticizer)
training$Superplasticizer
hist(as.numeric(training$SuperPlasticizer), quantiles(10))
hist(training$Superplasticizer)
hist(log(training$Superplasticizer))
head(log(training$Superplasticizer))
summary(training$Superplasticizer)
hist(training$Superplasticizer)
hist(log(training$Superplasticizer))
hist(log(training$Superplasticizer+1))
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
data <- training[, grep('^IL', names(training))]
data
head(data)
preProcess(data, method='pca', thresh=0.9)
IL_col_idx <- grep("^[Ii][Ll].*", names(training))
head(IL_col_idx)
summary(IL_col_idx)
head(training)
names(training)
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
names(training)
data <- training[, grep('^IL', names(training))]
data
names(data)
preProcess(data, method='pca', thresh=0.9)
?preProcess
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
data <- grep("^IL", colnames(training), value=TRUE)
set.seed(3433)
data <- grep("^IL", colnames(training), value=TRUE)
predictors <- predictors[, data]
df <- data.frame(diagnosis, predictors)
inTrain = createDataPartition(df$diagnosis, p = 3/4)[[1]]
training = df[inTrain, ]
testing = df[-inTrain, ]
modelFit <- train(diagnosis ~ ., method = "glm", data=training)
predictions <- predict(modelFit, newdata=testing)
C1 <- confusionMatrix(predictions, testing$diagnosis)
print(C1)
library(caret)
modelFit <- train(diagnosis ~ ., method = "glm", data=training)
install.packages("e1071")
library(e1071)
modelFit <- train(diagnosis ~ ., method = "glm", data=training)
predictions <- predict(modelFit, newdata=testing)
C1 <- confusionMatrix(predictions, testing$diagnosis)
print(C1)
A1 <- C1$overall[1]
A1
modelFit <- train(training$diagnosis ~ ., method = "glm", preProcess = "pca",
data <- training, trControl = trainControl(preProcOptions = list(thresh = 0.8)))
C2 <- confusionMatrix(testing$diagnosis, predict(modelFit, testing))
print(C2)
A2 <- C2$overall[1]
A2
predictions <- predict(modelFit, testing)
C2 <- confusionMatrix(predictions, testing$diagnosis)
C2
C2$overall[1]
preProcess(data, method='pca', thresh=0.9)
modelFit <- train(training$diagnosis ~ ., method = "glm", preProcess = "pca",
data=training, thresh=0.8)
modelFit <- train(training$diagnosis ~ ., method = "glm", preProcess = "pca",
data=training)
predictions <- predict(modelFit, testing)
C2 <- confusionMatrix(predictions, testing$diagnosis)
C2
print(C2)
fn  <- "activity.csv"
dat <- read.csv(fn, stringAsFactors=FALSE)
dat <- read.csv(fn)
setwd("D:\\doc\\Education\\JH-DataScience\\5. Reproducible research\\Week #2\\Lesson #3 - Course project 1\\RepData_PeerAssessment1")
dat <- read.csv(fn, stringsAsFactors = FALSE)
head(dat)
str(head)
str(dat)
df <- data.frame(dat)
head(df)
class(df)
class(df$steps)
class(df$date)
class(df$interval)
df$date <- as.Date(df$date)
head(df$date)
class(df$date)
?aggregate
stepsPerDay <- aggregate(x=df, by=date, FUN="sum")
stepsPerDay <- aggregate(x=df, by=c("date"), FUN="sum")
stepsPerDay <- aggregate(x=df, by=list("date"), FUN="sum")
stepsPerDay <- aggregate(x=df$steps, by=list("date"), FUN="sum")
stepsPerDay <- aggregate(x=df, by=list("date"), FUN="sum")
stepsPerDay <- aggregate(data=df, FUN="sum")
stepsPerDay <- aggregate(x=steps, data=df, FUN="sum")
stepsPerDay <- aggregate(x=df$steps, data=df, FUN="sum")
stepsPerDay <- aggregate(x=df$steps, by=df$date, data=df, FUN="sum")
stepsPerDay <- aggregate(x=df$steps, by=list("date"), data=df, FUN="sum")
stepsPerDay <- aggregate(steps ~ date, data=df, FUN="sum")
stepsPerDay
hist(stepsPerDay)
hist(as.numeric(stepsPerDay))
class(stepsPerDay$steps)
hist(stepsPerDay$steps)
?hist
hist(stepsPerDay$date)
hist(stepsPerDay$steps, stepsPerDay$date)
hist(stepsPerDay$steps, stepsPerDay$date)
hist(x=stepsPerDay$steps, breaks=stepsPerDay$date)
hist(x=stepsPerDay$date)
hist(x=stepsPerDay$steps)
hist(x=stepsPerDay$steps, breaks=53)
hist(x=stepsPerDay$steps)
hist(x=stepsPerDay$steps, breaks=10)
hist(x=stepsPerDay$steps, breaks=10, xlab="Number of steps per day", ylab="Frequency", main="Total number of steps per day")
hist(x=stepsPerDay$steps, breaks=10, xlab="Number of steps per day", ylab="Frequency")
hist(x=stepsPerDay$steps, breaks=10, xlab="Number of steps per day", ylab="Frequency", main="Total number of steps per day")
hist(x=stepsPerDay$steps, breaks=10, xlab="Number of steps", ylab="Frequency", main="Total number of steps per day")
?hist
spdSum <- aggregate(steps ~ date, data=df, FUN="sum")
hist(x=spdSum$steps, breaks=10, xlab="Number of steps", ylab="Frequency",
main="Histogram of the total number of steps per day")
spdMean   <- aggregate(steps ~ date, data=df, FUN="mean")
spdMedian <- aggregate(steps ~ date, data=df, FUN="median")
spd       <- aggregate(steps ~ date, data=df, FUN="sum")
spdMean   <- mean(spd$steps)
spdMedian <- median(spd$steps)
spdMean
spdMedian
class(spdMeadian)
class(spdMedian)
head(spd)
head(df)
head(df, 50)
plot?
)
?plot
plot(x=df$interval, y=df$steps, type="l")
